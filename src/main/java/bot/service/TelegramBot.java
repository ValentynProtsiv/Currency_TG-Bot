package bot.service;

import bot.Bank;
import bot.config.BotConfig;
import bot.model.*;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;

@Slf4j
@Component
public class TelegramBot extends TelegramLongPollingBot {

    @Autowired
    UserService service = new UserService();

    User user = new User();

    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
    final BotConfig config;

    public TelegramBot(BotConfig config) {
        this.config = config;
        List<BotCommand> listOfCommands = new ArrayList<>();
        listOfCommands.add(new BotCommand("/start", "get a welcome message"));
        listOfCommands.add(new BotCommand("/help", "info how to use this bot"));
        listOfCommands.add(new BotCommand("/settings", "set your preferences"));
        try {
            this.execute(new SetMyCommands(listOfCommands, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }
    @Override
    public String getBotUsername() {
        return config.getBotName();
    }

    @Override
    public String getBotToken() {
        return config.getToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String massageTest = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();
            User users = service.findChatId(update.getMessage().getChatId());

            switch (massageTest) {
                case "/start":
                    registerUser(update.getMessage());
                    startCommandReceived(chatId, users.getUserName());
                    startMenu(chatId, "–û—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é");
                    break;
                case "/help":

                    break;
                case "/settings":
                    settingsMenu(chatId, "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è");
                    break;
                case "–î–æ–ø–æ–º–æ–≥–∞":

                    break;
                case "–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é":
                    informationACurrency(chatId, "üéÉ", users.getCurrency(), users.getBankName(), users.getNumberAFP());
                    break;
                case "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è":
                    settingsMenu(chatId, "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è");
                    break;
                case "–ù–∞–∑–∞–¥":
                    startMenu(chatId, "–û—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é.");
                    break;
                case "–ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å":
                    settingsMenu(chatId, "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è");
                    break;
                case "–ë–∞–Ω–∫":
                    banks(chatId, "–û–±–µ—Ä—ñ—Ç—å –±–∞–Ω–∫.", users.getBankName());
                    break;
                case "PrivatBank":
                    banks(chatId, "–û–±—Ä–∞–Ω–æ PrivatBank.", 0);
                    break;
                case "MonoBank":
                    banks(chatId, "–û–±—Ä–∞–Ω–æ MonoBank.", 1);
                    break;
                case "NBU":
                    banks(chatId, "–û–±—Ä–∞–Ω–æ NBU.", 2);
                    break;
                case "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏":
                    numAFP(chatId, "–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏.", users.getNumberAFP());
                    break;
                case "2":
                    numAFP(chatId, "–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏.", 0);
                    break;
                case "3":
                    numAFP(chatId, "–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏.", 1);
                    break;
                case "4":
                    numAFP(chatId, "–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏.", 2);
                    break;
                case "–í–∞–ª—é—Ç–∞":
                    currencySelect(chatId, "–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É.", users.getCurrency());
                    break;
                case "USD":
                    currencySelect(chatId, "–û–±–µ—Ä–∞–Ω–æ USD.", 0);
                    break;
                case "EUR":
                    currencySelect(chatId, "–û–±–µ—Ä–∞–Ω–æ EUR.", 1);
                    break;
                case "–ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è":
                    notificationUser(chatId, "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.", users.getHour());
                    break;
                case "–í–∏–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è":
                        notificationUser(chatId, "–û–±—Ä–∞–Ω–æ: –í–∏–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.", 0);
                    break;
                case "9":
                    notificationUser(chatId, "–û–±—Ä–∞–Ω–æ: 9 –≥–æ–¥–∏–Ω—É", 1);
                    break;
                case "10":
                    notificationUser(chatId, "–û–±—Ä–∞–Ω–æ: 10 –≥–æ–¥–∏–Ω—É", 2);
                    break;
                case "11":
                    notificationUser(chatId, "–û–±—Ä–∞–Ω–æ: 11 –≥–æ–¥–∏–Ω—É", 3);
                    break;
                case "12":
                    notificationUser(chatId, "–û–±—Ä–∞–Ω–æ: 12 –≥–æ–¥–∏–Ω—É", 4);
                    break;
                case "13":
                    notificationUser(chatId, "–û–±—Ä–∞–Ω–æ: 13 –≥–æ–¥–∏–Ω—É", 5);
                    break;
                case "14":
                    notificationUser(chatId, "–û–±—Ä–∞–Ω–æ: 14 –≥–æ–¥–∏–Ω—É", 6);
                    break;
                case "15":
                    notificationUser(chatId, "–û–±—Ä–∞–Ω–æ: 15 –≥–æ–¥–∏–Ω—É", 7);
                    break;
                case "16":
                    notificationUser(chatId, "–û–±—Ä–∞–Ω–æ: 16 –≥–æ–¥–∏–Ω—É", 8);
                    break;
                case "17":
                    notificationUser(chatId, "–û–±—Ä–∞–Ω–æ: 17 –≥–æ–¥–∏–Ω—É", 9);
                    break;
                case "18":
                    notificationUser(chatId, "–û–±—Ä–∞–Ω–æ: 18 –≥–æ–¥–∏–Ω—É", 10);
                    break;

                default:
                    sendMessage(chatId, "–©–æ—Å—å –Ω–µ —Ç–∞–∫");
            }

        }
    }
    private void startCommandReceived(long chatId, String name) {
        String answer = "Hi, " + name + ", nice to meet you! ‚ú®";
        sendMessage(chatId, answer);
    }
    private void startMenu(long chatId, String textToSend){
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é");

        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è");
        row.add("–î–æ–ø–æ–º–æ–≥–∞");

        keyboardRows.add(row);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        executeMessage(message);
    }
    private void settingsMenu(long chatId, String textToSend){
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏");
        row.add("–ë–∞–Ω–∫");
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–í–∞–ª—é—Ç–∞");
        row.add("–ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è");

        keyboardRows.add(row);
        row = new KeyboardRow();
        row.add("–ù–∞–∑–∞–¥");
        keyboardRows.add(row);
        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        executeMessage(message);
    }

    protected User getUser(long chatId, User user){
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));

        return user = service.findChatId(Long.valueOf(message.getChatId()));
    }
    private void registerUser(Message message) {
        if (!service.existByChatId(message.getChatId())) {
            var chatId = message.getChatId();
            var chat = message.getChat();

            User user = getUser(message.getChatId(), new User());

            user.setChatId(chatId);
            user.setUserName(chat.getUserName());
            user.setBankName(BankName.MonoBank.ordinal());
            user.setNumberAFP(NumberAFP.two.ordinal());
            user.setCurrency(Currency.eur.ordinal());
            user.setHour(NotificationHour.zero.ordinal());

            service.save(user);
            System.out.println("user saved: " + user);
        }
    }
    private void banks(long chatId, String textToSend, Integer choice){
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        User user1 = getUser(chatId, user);

        user1.setBankName(choice);
        service.save(user1);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("PrivatBank" + ((choice == 0) ? "‚úÖ" : ""));
        row.add("MonoBank" + ((choice == 1) ? "‚úÖ" : ""));
        row.add("NBU" + ((choice == 2) ? "‚úÖ" : ""));
        backToSettings(message, user1, keyboardMarkup, keyboardRows, row);
    }

    private void numAFP(long chatId, String textToSend, Integer choice){
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        User user1 = getUser(chatId, user);

        user1.setNumberAFP(choice);
        service.save(user1);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("2" + ((choice == 0) ? "‚úÖ" : ""));
        row.add("3" + ((choice == 1) ? "‚úÖ" : ""));
        row.add("4" + ((choice == 2) ? "‚úÖ" : ""));
        backToSettings(message, user1, keyboardMarkup, keyboardRows, row);
    }
    private void currencySelect(long chatId, String textToSend, Integer choice){
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        User user1 = getUser(chatId, user);

        user1.setCurrency(choice);
        service.save(user1);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("USD" + ((choice == 0) ? "‚úÖ" : ""));
        row.add("EUR" + ((choice == 1) ? "‚úÖ" : ""));
        backToSettings(message, user1, keyboardMarkup, keyboardRows, row);
    }
    private void informationACurrency(long chatId, String textToSend, Integer currencySel, Integer bankSel, Integer numAFPSel){
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        Bank bankClas = new Bank();
        String currencyText;
        String bankText;
        int countNum;

        int currency =  currencySel;
        int bank =  bankSel;
        int numAFP =  numAFPSel;


        String allText = "";

        if (numAFP == 0){
             countNum = 5;
        }else if (numAFP == 1){
             countNum = 6;
        }else {
             countNum = 7;
        }
        if (bank == 0){
             bankText = "PrivatBank";
        }else if (bank == 1){
             bankText = "MonoBank";
        }else {
             bankText = "NBU";
        }

        if (currency == 0){
            currencyText = "USD";
        }else{
            currencyText = "EUR";
        }

        sendMessage(chatId,
                "–û–±—Ä–∞–Ω–æ:\n\n–ë–∞–Ω–∫: " + bankText + "." +
                        "\n–í–∞–ª—é—Ç–∞: " + currencyText + "." +
                        "\n–ö-—Å—Ç—å –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏: " + (countNum - 3) + ".");

        if (bank == 0 || bank == 1){
            String getValSell = bankClas.getRate(currencyText, bankText, "sell");
            String doneInfoSell = getValSell.substring(0, countNum);

            String getValBuy = bankClas.getRate(currencyText, bankText, "buy");
            String doneInfoBuy = getValBuy.substring(0, countNum);
            allText = "\n\n–ü—Ä–æ–¥–∞–∂: " + doneInfoSell + "\n–ö—É–ø—ñ–≤–ª—è: " + doneInfoBuy;
        }else {
            String getValBuy = bankClas.getRate(currencyText, bankText, "buy");
            String doneInfoBuy = getValBuy.substring(0, countNum);
            allText = "\n\n–ö—É–ø—ñ–≤–ª—è: " + doneInfoBuy;
        }

        sendMessage(chatId, allText);

        executeMessage(message);
    }

    private void notificationUser(long chatId, String textToSend, Integer choice){
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        User user1 = getUser(chatId, user);

        user1.setHour(choice);
        service.save(user1);


        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("9" + ((choice == 1) ? "‚úÖ" : ""));
        row.add("10" + ((choice == 2) ? "‚úÖ" : ""));
        row.add("11" + ((choice == 3) ? "‚úÖ" : ""));
        row.add("12" + ((choice == 4) ? "‚úÖ" : ""));
        row.add("13" + ((choice == 5) ? "‚úÖ" : ""));
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("14" + ((choice == 6) ? "‚úÖ" : ""));
        row.add("15" + ((choice == 7) ? "‚úÖ" : ""));
        row.add("16" + ((choice == 8) ? "‚úÖ" : ""));
        row.add("17" + ((choice == 9) ? "‚úÖ" : ""));
        row.add("18" + ((choice == 10) ? "‚úÖ" : ""));
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–í–∏–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è" + ((choice == 0) ? "‚úÖ" : ""));
        backToSettings(message, user1, keyboardMarkup, keyboardRows, row);
    }

    private void backToSettings(SendMessage message, User user1, ReplyKeyboardMarkup keyboardMarkup, List<KeyboardRow> keyboardRows, KeyboardRow row) {
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("–ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å");
        keyboardRows.add(row);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);
        System.out.println("user saved: " + user1);
        executeMessage(message);
    }

    protected void sendMessage(long chatId, String textToSend) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        executeMessage(message);
    }
    private void executeMessage(SendMessage message){
        try {
            execute(message);
        } catch (TelegramApiException ignored) {
        }
    }
}